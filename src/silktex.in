#!@PYTHON@
# -*- coding: utf-8 -*-

# silktex - LaTeX editor with live preview
# @VERSION@

import sys
import os
import signal
import locale
import gettext

# Enable Ctrl+C to work properly
signal.signal(signal.SIGINT, signal.SIG_DFL)

# Configure paths
pkgdatadir = '@pkgdatadir@'
moduledir = '@moduledir@'
localedir = '@LOCALEDIR@'

# Setup Python path
sys.path.insert(1, pkgdatadir)
sys.path.insert(1, moduledir)

# Set up internationalization
if hasattr(locale, 'bindtextdomain'):
    locale.bindtextdomain('silktex', localedir)
    locale.textdomain('silktex')

if hasattr(gettext, 'bindtextdomain'):
    gettext.bindtextdomain('silktex', localedir)
    gettext.textdomain('silktex')

# Import and run
if __name__ == '__main__':
    # Let's create a very reliable method to find our main script
    main_files = [
        os.path.join(pkgdatadir, 'main.py'),
        os.path.join(moduledir, '..', 'main.py'),
        os.path.join(moduledir, 'main.py'),
        os.path.join(os.path.dirname(os.path.abspath(__file__)), 'main.py')
    ]
    
    # Try each possible location
    for main_file in main_files:
        if os.path.exists(main_file):
            print(f"Found main.py at {main_file}")
            try:
                # Execute the script directly
                with open(main_file) as f:
                    print(f"Executing {main_file} directly")
                    exec_globals = {'__file__': main_file}
                    code = compile(f.read(), main_file, 'exec')
                    exec(code, exec_globals)
                    if 'main' in exec_globals:
                        sys.exit(exec_globals['main']('@VERSION@'))
            except Exception as e:
                print(f"Error executing {main_file}: {e}")
    
    # If we get here, we couldn't find or execute main.py
    # Create a basic application as a fallback
    print("No main.py found, creating minimal app")
    
    # Basic imports
    import gi
    gi.require_version('Gtk', '4.0')
    gi.require_version('Adw', '1')
    from gi.repository import Gtk, Adw, Gio, GLib
    
    # Initialize Adw
    Adw.init()
    
    # Create a basic window and application
    class MinimalWindow(Adw.ApplicationWindow):
        def __init__(self, **kwargs):
            super().__init__(**kwargs)
            self.set_default_size(600, 400)
            self.set_title("SilkTex - Error Recovery Mode")
            
            box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
            self.set_content(box)
            
            header = Adw.HeaderBar()
            box.append(header)
            
            content = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=10)
            content.set_margin_top(20)
            content.set_margin_bottom(20)
            content.set_margin_start(20)
            content.set_margin_end(20)
            box.append(content)
            
            title = Gtk.Label()
            title.set_markup("<span size='xx-large' weight='bold'>SilkTex</span>")
            content.append(title)
            
            error_label = Gtk.Label()
            error_label.set_markup("<span color='red'>Error: Could not start SilkTex normally</span>")
            content.append(error_label)
            
            info = Gtk.Label(label="SilkTex is running in emergency mode.")
            content.append(info)
            
            paths = Gtk.Label(label=f"Module directory: {moduledir}\nPackage directory: {pkgdatadir}")
            paths.set_margin_top(10)
            content.append(paths)
    
    class MinimalApp(Adw.Application):
        def __init__(self):
            super().__init__(application_id='org.example.silktex',
                             flags=Gio.ApplicationFlags.FLAGS_NONE)
        
        def do_activate(self):
            win = MinimalWindow(application=self)
            win.present()
    
    # Run the minimal app
    app = MinimalApp()
    sys.exit(app.run(sys.argv))
